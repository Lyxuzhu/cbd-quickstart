
{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Deploys a new Cloudbreak deployment for AWS into a new VPC.",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "MinLength" : "1",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "RemoteLocation": {
      "Description": "Allow connections from this address range. Must be a valid CIDR IP. Learn more at https://www.ipaddressguide.com/cidr.",
      "ConstraintDescription": "must be a single IP address or an IP address range in CIDR notation (More information at https://www.ipaddressguide.com/cidr).",
      "Type": "String",
      "AllowedPattern" : "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    },
    "EmailAddress" : {
      "Description" : "Username for the Admin account. Must be a valid email address.",
      "Type" : "String",
      "MinLength" : "5",
      "MaxLength" : "100",
      "ConstraintDescription" : "must be a valid e-mail address",
      "AllowedPattern" : "^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$"
    },
    "AdminPassword" : {
      "Description" : "Password for Admin account. Must be at least 8 characters containing letters, numbers and symbols.",
      "Type" : "String",
      "NoEcho": "true",
      "MinLength" : "8",
      "MaxLength" : "50",
      "ConstraintDescription" : "must be at least 8 characters containing letters, numbers and symbols.",
      "AllowedPattern" : "^[^\\s\\t\\n\\r]{8,50}$"
    },
    "InstanceType" : {
      "Description" : "EC2 instance type to use for the cloud controller.",
      "Type" : "String",
      "Default" : "m4.large",
      "AllowedValues" : [ "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge" ]
    }
  },

  "Metadata" : {
      "AWS::CloudFormation::Interface" : {
        "ParameterGroups" : [
          {
            "Label" : { "default" : "General Configuration" },
            "Parameters" : [ "InstanceType", "EmailAddress", "AdminPassword" ]
          },
          {
            "Label" : { "default" : "Security Configuration" },
            "Parameters" : [ "KeyName", "RemoteLocation" ]
          }
        ],
        "ParameterLabels" : {
          "InstanceType" : { "default" : "Controller Instance Type" },
          "EmailAddress" : { "default" : "Email Address" },
          "AdminPassword" : { "default" : "Admin Password" },
          "KeyName" : { "default" : "SSH Key Name"},
          "RemoteLocation" : { "default" : "Remote Access" }
        }
      }
  },

  "Mappings": {
      "AWSRegionAMI": {"ap-northeast-1":{"ami":"ami-92df37ed"},"ap-northeast-2":{"ami":"ami-c10fa6af"},"ap-south-1":{"ami":"ami-76d6f519"},"ap-southeast-1":{"ami":"ami-de90a5a2"},"ap-southeast-2":{"ami":"ami-423bec20"},"ca-central-1":{"ami":"ami-338a0a57"},"eu-central-1":{"ami":"ami-9a91b371"},"eu-west-1":{"ami":"ami-ca0135b3"},"eu-west-2":{"ami":"ami-a36f8dc4"},"eu-west-3":{"ami":"ami-969c2deb"},"sa-east-1":{"ami":"ami-3885d854"},"us-east-1":{"ami":"ami-14c5486b"},"us-east-2":{"ami":"ami-922914f7"},"us-west-1":{"ami":"ami-25110f45"},"us-west-2":{"ami":"ami-e251209a"}}
   },

   "Resources" : {
    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : "10.0.0.0/16",
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } }
        ]
      }
    },

    "PublicSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "MapPublicIpOnLaunch" : true,
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.0.0/24",
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } }
        ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } }
        ]
      }
    },

    "AttachGateway" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },

    "PublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } }
        ]
      }
    },

    "PublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : [ "PublicRouteTable", "AttachGateway" ],
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PublicSubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },

    "CloudbreakRole": {
         "Type": "AWS::IAM::Role",
         "Properties": {
            "AssumeRolePolicyDocument": {
               "Version" : "2012-10-17",
               "Statement": [ {
                  "Effect": "Allow",
                  "Principal": {
                     "Service": [ "ec2.amazonaws.com" ]
                  },
                  "Action": [ "sts:AssumeRole" ]
               } ]
            },
            "Path": "/",
            "Policies": [ {
               "PolicyName": "root",
               "PolicyDocument": {
                  "Version" : "2012-10-17",
                  "Statement": [
                  {
                     "Effect": "Allow",
                     "Action": [ "sts:AssumeRole" ],
                     "Resource": "*"
                  }, {
                     "Effect": "Allow",
                     "Action": [ "ec2:DescribeKeyPairs",
                                 "ec2:DescribeInternetGateways",
                                 "ec2:DescribeVpcs",
                                 "ec2:DescribeSubnets",
                                 "s3:CreateBucket",
                                 "s3:PutObject",
                                 "s3:ListAllMyBuckets",
                                 "cloudformation:DescribeStackResource",
                                 "iam:ListRoles" ],
                     "Resource": "*"
                  }
                  ]
               }
               } ]
            }
      },
      "RootInstanceProfile": {
         "Type": "AWS::IAM::InstanceProfile",
         "Properties": {
            "Path": "/",
            "Roles": [ {
               "Ref": "CloudbreakRole"
            } ]
         }
      },

    "Cloudbreak": {
      "Type": "AWS::EC2::Instance",
      "DependsOn" : [ "PublicSubnetRouteTableAssociation", "PublicRoute" ],
      "Metadata" : {
        "cloudbreak" : {
          "user" : { "Ref" : "EmailAddress" },
          "password" : { "Ref" : "AdminPassword" },
          "secret" : {
              "default" : { "Fn::Base64" : { "Ref" : "AWS::StackId" } }
          }
        },
        "profile" : { "Fn::Join" : ["", [
          "export STACK_NAME=", { "Ref" : "AWS::StackName" }, "\n",
          "export KEYPAIR_NAME=", { "Ref" : "KeyName" }, "\n",
          "export WAIT_HANDLE_URL='", { "Ref" : "InstanceWaitHandle" }, "'\n",
          "export UPLOAD_LOGS=NO\n",
          "export VPC_ID='", { "Ref" : "VPC" } ,"'\n",
          "export AWS_ACCOUNT_ID='", { "Ref" : "AWS::AccountId" } ,"'", "\n",
          "export IGW_ID='", { "Ref" : "InternetGateway" } ,"'\n",
          "export CBD_VERSION=2.4.2-rc.32\n",
          "export BUILD_CLUSTER=false\n",
          "\n",
          ""
        ]]},
        "cbdprofile" : { "Fn::Join" : ["", [
          "get-meta() { aws --region ", { "Ref" : "AWS::Region" }, " cloudformation describe-stack-resource --stack-name ", { "Ref" : "AWS::StackName" }, " --logical-resource-id Cloudbreak | jq -r .StackResourceDetail.Metadata | jq -r $1; }", "\n",
          "# START-CF-TEMPLATE\n",
          "export UAA_DEFAULT_SECRET=$(get-meta '.cloudbreak.secret.default')", "\n",
          "export COMPOSE_HTTP_TIMEOUT=240", "\n",
          "export UAA_DEFAULT_USER_EMAIL='", { "Ref" : "EmailAddress" }, "'", "\n",
          "export UAA_DEFAULT_USER_PW=''\n",
          "export CB_AWS_DEFAULT_CF_TAG='", { "Ref" : "AWS::StackId" } ,"'", "\n",
          "export AWS_REGION=", { "Ref" : "AWS::Region" }, "\n",
          "export AWS_ACCOUNT_ID='", { "Ref" : "AWS::AccountId" } ,"'", "\n",
          "export AWS_AMI_ID=$(curl -4fs 169.254.169.254/latest/meta-data/ami-id)", "\n",
          "export AWS_INSTANCE_ID=$(curl -4fs 169.254.169.254/latest/meta-data/instance-id)", "\n",
          "export CB_TRAEFIK_HOST_ADDRESS=$(curl -m 1 -f -s 169.254.169.254/latest/meta-data/public-ipv4 2>/dev/null)", "\n",
          "export ULU_SUBSCRIBE_TO_NOTIFICATIONS=false", "\n",
          "export CB_DEFAULT_SUBSCRIPTION_ADDRESS=http://uluwatu.service.consul:3000/notifications", "\n",
          "export CB_AWS_DEFAULT_INBOUND_SECURITY_GROUP=", { "Ref" : "CloudbreakSecurityGroup" }, "\n",
          "# END-CF-TEMPLATE\n"

        ]]}
      },
      "Properties": {
        "IamInstanceProfile": { "Ref" : "RootInstanceProfile" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionAMI", { "Ref" : "AWS::Region" }, "ami" ] },
        "SubnetId" : { "Ref" : "PublicSubnet" },
        "SecurityGroupIds" : [ { "Ref" : "CloudbreakSecurityGroup" } ],
        "InstanceType"   : { "Ref" : "InstanceType" },
        "KeyName"        : { "Ref" : "KeyName" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : ["", [ { "Ref" : "AWS::StackName" }, "-cbd" ]] } }
        ],
        "UserData"       : ""
      }
    },

    "InstanceWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "InstanceWaitCondition" : {
       "Type" : "AWS::CloudFormation::WaitCondition",
       "DependsOn" : "Cloudbreak",
       "Properties" : {
          "Handle"  : { "Ref" : "InstanceWaitHandle" },
          "Timeout" : 36000
       }
    },

    "PrecheckDeployment": {
      "Type": "Custom::PrecheckDeployment",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": ["ValidateParameters", "Arn"]
        }
      }
    },

    "ValidateParameters": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": ["LambdaExecutionRole", "Arn"]
        },
        "Code": {
          "ZipFile": "send=function(e,t,n,s){var o=JSON.stringify({Status:n,Reason:s+\" CloudWatch Log: \"+t.logStreamName,PhysicalResourceId:t.logStreamName,StackId:e.StackId,RequestId:e.RequestId,LogicalResourceId:e.LogicalResourceId}),r=require(\"https\"),i=require(\"url\").parse(e.ResponseURL),u={hostname:i.hostname,port:443,path:i.path,method:\"PUT\",headers:{\"content-type\":\"\",\"content-length\":o.length}},c=r.request(u,function(e){console.log(\"Response status code: \"+e.statusCode),console.log(\"Response status message: \"+e.statusMessage),t.done()});c.on(\"error\",function(e){t.done()}),c.write(o),c.end()},describeSubnet=function(e,o,r){return new Promise(function(n,s){e.describeSubnets({Filters:[{Name:\"subnet-id\",Values:[r]}]},function(e,t){e?s(\"describeSubnets call failed: \"+e):0<t.Subnets.length?t.Subnets[0].VpcId==o?(console.log(\"Subnet is within the VPC\"),n()):s(\"The selected subnet belongs to a different VPC.\"):s(\"There is no subnet with id: \"+r)})})},describeVPCAttribute=function(e,t){return new Promise(function(n,s){e.describeVpcAttribute({Attribute:\"enableDnsSupport\",VpcId:t},function(e,t){e?s(\"describeVpcAttribute call failed: \"+e):t.EnableDnsSupport.Value?(console.log(\"DNS resolution is enabled in the VPC\"),n()):s(\"DNS resolution must be enabled in the VPC\")})})},exports.handler=function(t,n,s){if(console.log(\"REQUEST RECEIVED:\\n\",JSON.stringify(t)),\"Create\"!=t.RequestType)send(t,n,\"SUCCESS\");else{if(null==t.ResourceProperties.VPC||null==t.ResourceProperties.SUBNET)return void send(t,n,\"SUCCESS\");var e=t.ResourceProperties.VPC,o=t.ResourceProperties.SUBNET;if(!e&&!o)return void send(t,n,\"FAILED\",\"Both VPC and Subnet ID must be specified!\");var r=new(require(\"aws-sdk\").EC2);describeSubnet(r,e,o).then(function(){return describeVPCAttribute(r,e)}).then(function(){send(t,n,\"SUCCESS\"),s(null,\"VPC and subnet has been validated.\")}).catch(function(e){send(t,n,\"FAILED\",e),s(e)})}};"
        },
        "Runtime": "nodejs4.3",
        "Timeout": "60"
      }
    },

    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": ["lambda.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
                "Effect": "Allow",
                "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"],
                "Resource": "arn:aws:logs:*:*:*"
              }
            ]
          }
        }]
      }
    },
    "CloudbreakSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupDescription" : "Enable HTTP access to Cloud UI and SSH access from a remote location",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : { "Ref" : "RemoteLocation" } },
          {"IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : { "Ref" : "RemoteLocation" } },
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "RemoteLocation" } }
        ]
      }
    }
   },

  "Outputs" : {
    "CloudController" : {
      "Value" : { "Fn::GetAtt" : [ "InstanceWaitCondition", "Data" ]},
      "Description" : "URL to the Cloudbreak deployment's UI. Login using the Admin account information you provided during Create Stack."
    },
    "SshAccess" : {
      "Value" : { "Fn::Join" : ["", ["ssh -i ", { "Ref" : "KeyName" }, ".pem cloudbreak@", { "Fn::GetAtt" : [ "Cloudbreak", "PublicIp" ]} ]] },
      "Description" : "Access the instance via ssh"
    }
  }
}
